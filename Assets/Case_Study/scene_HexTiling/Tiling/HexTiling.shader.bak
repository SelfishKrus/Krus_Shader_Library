Shader "Custom/HexTiling"
{
    Properties
    {
        _Color ("Color", Color) = (1,1,1,1)
        _MainTex ("Albedo (RGB)", 2D) = "white" {}
        _Glossiness ("Smoothness", Range(0,1)) = 0.5
        _Metallic ("Metallic", Range(0,1)) = 0.0
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 200

        CGPROGRAM
        // Physically based Standard lighting model, and enable shadows on all light types
        #pragma surface surf Standard fullforwardshadows

        // Use shader model 3.0 target, to get nicer looking lighting
        #pragma target 3.0

        #define M_PI    3.14159265358979323846

        sampler2D _MainTex;

        struct Input
        {
            float2 uv_MainTex;
        };

        half _Glossiness;
        half _Metallic;
        fixed4 _Color;

        // Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.
        // See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.
        // #pragma instancing_options assumeuniformscaling
        UNITY_INSTANCING_BUFFER_START(Props)
            // put more per-instance properties here
        UNITY_INSTANCING_BUFFER_END(Props)

        // 输出每个六边形Tile的权重和中心的整数坐标
        void TriangleGrid(out float w1, out float w2, out float w3, out int2 vertex1, out int2 vertex2, out int2 vertex3, float2 uv)
        {
            // 调整缩放
            uv *= 2 * sqrt(3);
            // 把坐标转换到simplex三角形网格内
            const float2x2 gridToSkewedGrid = float2x2(1.0, -0.57735027, 0.0, 1.15470054);
            float2 skewedGrid = mul(gridToSkewedGrid, uv);
            // 先得到所谓整数坐标系的左下角值
            int2 baseID = int2(floor(skewedGrid));
            float3 temp = float3(frac(skewedGrid), 0.0);
            temp.z = 1.0 - temp.x - temp.y;

            float s = step(0.0, -temp.z);
            float s2 = 2.0 * s - 1.0;

            w1 = -temp.z * s2;
            w2 = s - temp.y * s2;
            w3 = s - temp.x * s2;

            vertex1 = baseID + int2(s, s);
            vertex2 = baseID + int2(s, 1 - s);
            vertex3 = baseID + int2(1 - s, s);
        }

        float2 hash( float2 p)
        {
            float2 r = mul(float2x2(127.1, 311.7, 269.5, 183.3), p);
            return frac(sin(r) * 43758.5453);
        }

        // 从顶点反推坐标，实际上就是把三角形网格里的坐标转换为uv
        float2 MakeCenUV(int2 Vertex)
        {
            float2x2 invSkewMat = float2x2(1.0, 0.5, 0.0, 1.0/1.15470054);
            return mul(invSkewMat, Vertex) / (2 * sqrt(3));
        }

        // 2D上的旋转矩阵
        float2x2 LoadRot2x2(int2 idx, float rotStrength)
        {
            float angle = abs(idx.x*idx.y) + abs(idx.x+idx.y) + M_PI;
            // Remap to +/-pi.
            angle = fmod(angle, 2*M_PI);
            if(angle<0) angle += 2*M_PI;
            if(angle>M_PI) angle -= 2*M_PI;
            angle *= rotStrength;
            float cs = cos(angle), si = sin(angle);
            return float2x2(cs, -si, si, cs);
        }

        // 将权重转换为可视化颜色，指示六边形是如何分布的
        float3 ProduceHexWeights(float3 W, int2 vertex1, int2 vertex2, int2 vertex3)
        {
            float3 res = 0.0;
            int v1 = (vertex1.x-vertex1.y)%3;
            if (v1<0) v1+=3;
            int vh = v1<2 ? (v1+1) : 0;
            int vl = v1>0 ? (v1-1) : 2;
            int v2 = vertex1.x<vertex3.x ? vl : vh;
            int v3 = vertex1.x<vertex3.x ? vh : vl;
            res.x = v3==0 ? W.z : (v2==0 ? W.y : W.x);
            res.y = v3==1 ? W.z : (v2==1 ? W.y : W.x);
            res.z = v3==2 ? W.z : (v2==2 ? W.y : W.x);
            return res;
        }

        // 用S曲线对信号进行ramp，然后归一化权重
        float3 Gain3(float3 x, float r)
        {
            // r > 0.5就增大差异，反之减小差异
            float k = log(1-r) / log(0.5);
            float3 s = 2*step(0.5, x);
            float3 m = 2*(1 - s);
            float3 res = 0.5*s + 0.25*m * pow(max(0.0, s + x*m), k);
            return res.xyz / (res.x+res.y+res.z);
        }

        // Input: vM is the tangent-space normal in [-1, 1]
        // Output: convert vM to a derivative
        float2 TspaceNormalToDerivative(float3 vM)
        {
            const float scale = 1.0/128.0;
            // Ensure vM delivers a positive third component using abs() and
            // constrain vM.z so the range of the derivative is [-128, 128].
            const float3 vMa = abs(vM);
            const float z_ma = max(vMa.z, scale*max(vMa.x, vMa.y));
            // Set to match positive vertical texture coordinate axis.
            const bool gFlipVertDeriv = false;
            const float s = gFlipVertDeriv ? -1.0 : 1.0;
            return -float2(vM.x, s*vM.y)/z_ma;
        }


        // 采样法线
        float2 sampleDeriv(sampler2D nmap, float2 st, float2 dx, float2 dy)
        {
            // Sample
            float3 vM = 2.0 * tex2Dgrad(nmap, st, dx, dy)-1.0;
            return TspaceNormalToDerivative(vM);
        }




        // 用六边形Tile去采样一个法线贴图
        void bumphex2derivNMap(out float2 deriv, out float3 weights, sampler2D nmap, float2 uv, float rotStrength, float r = 0.5)
        {
            float2 dx = ddx(uv);
            float2 dy = ddy(uv);
            // 把uv转换到六边形Tile内
            float w1, w2, w3;
            int2 vertex1, vertex2, vertex3;
            TriangleGrid(w1, w2, w3, vertex1, vertex2, vertex3, uv);
            // 旋转三个顶点
            float2x2 rot1 = LoadRot2x2(vertex1, rotStrength);
            float2x2 rot2 = LoadRot2x2(vertex2, rotStrength);
            float2x2 rot3 = LoadRot2x2(vertex3, rotStrength);
            float2 cen1 = MakeCenUV(vertex1);
            float2 cen2 = MakeCenUV(vertex2);
            float2 cen3 = MakeCenUV(vertex3);
            // 有了三个顶点所在位置的uv，围绕这三个顶点进行旋转uv
            float2 uv1 = mul(uv - cen1, rot1) + cen1 + hash(vertex1);
            float2 uv2 = mul(uv - cen2, rot2) + cen2 + hash(vertex2);
            float2 uv3 = mul(uv - cen3, rot3) + cen3 + hash(vertex3);
            // 采样三个顶点的法线，注意要保持ddx和ddy的旋转和uv的旋转一致
            float2 d1 = sampleDeriv(nmap, uv1, mul(dx, rot1), mul(dy, rot1));
            float2 d2 = sampleDeriv(nmap, uv2, mul(dx, rot2), mul(dy, rot2));
            float2 d3 = sampleDeriv(nmap, uv3, mul(dx, rot3), mul(dy, rot3));
            d1 = mul(d1, rot1);
            d2 = mul(d2, rot2);
            d3 = mul(d3, rot3);

            float3 D = float3( dot(d1,d1), dot(d2,d2), dot(d3,d3));
            float3 Dw = sqrt(D/(1.0+D));
            Dw = lerp(1.0, Dw, 0.6); // g_fallOffContrast
            float3 W = Dw*pow(float3(w1, w2, w3), 7); // g_exp
            W /= (W.x+W.y+W.z);
            if(r!=0.5) W = Gain3(W, r);
            deriv = W.x * d1 + W.y * d2 + W.z * d3;
            weights = ProduceHexWeights(W.xyz, vertex1, vertex2, vertex3);
        }

        void hex2colTex(out float4 color, out float3 weights, sampler2D tex, float2 uv, float rotStrength, float r = 0.5)
        {
            float2 dx = ddx(uv);
            float2 dy = ddy(uv);
            // 把uv转换到六边形Tile内
            float w1, w2, w3;
            int2 vertex1, vertex2, vertex3;
            TriangleGrid(w1, w2, w3, vertex1, vertex2, vertex3, uv);
            // 旋转三个顶点
            float2x2 rot1 = LoadRot2x2(vertex1, rotStrength);
            float2x2 rot2 = LoadRot2x2(vertex2, rotStrength);
            float2x2 rot3 = LoadRot2x2(vertex3, rotStrength);
            float2 cen1 = MakeCenUV(vertex1);
            float2 cen2 = MakeCenUV(vertex2);
            float2 cen3 = MakeCenUV(vertex3);
            // 有了三个顶点所在位置的uv，围绕这三个顶点进行旋转uv
            float2 uv1 = mul(uv - cen1, rot1) + cen1 + hash(vertex1);
            float2 uv2 = mul(uv - cen2, rot2) + cen2 + hash(vertex2);
            float2 uv3 = mul(uv - cen3, rot3) + cen3 + hash(vertex3);

            float4 c1 = tex2Dgrad(tex, uv1, mul(dx, rot1), mul(dy, rot1));
            float4 c2 = tex2Dgrad(tex, uv2, mul(dx, rot2), mul(dy, rot2));
            float4 c3 = tex2Dgrad(tex, uv3, mul(dx, rot3), mul(dy, rot3));

            float3 Lw = float3(0.299, 0.587, 0.114);
            float3 Dw = float3(dot(c1.rgb, Lw), dot(c2.rgb, Lw), dot(c3.rgb, Lw));

            Dw = lerp(1.0, Dw, 0.6); // g_fallOffContrast
            float3 W = Dw*pow(float3(w1, w2, w3), 7); // g_exp
            W /= (W.x+W.y+W.z);
            if(r!=0.5) W = Gain3(W, r);

            color = W.x * c1 + W.y * c2 + W.z * c3;
            weights = ProduceHexWeights(W.xyz, vertex1, vertex2, vertex3);
        }


        void surf (Input IN, inout SurfaceOutputStandard o)
        {


            fixed4 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;
            // Metallic and smoothness come from slider variables

            o.Metallic = _Metallic;
            o.Smoothness = _Glossiness;
            o.Alpha = c.a;
        }
        ENDCG
    }
    FallBack "Diffuse"
}
